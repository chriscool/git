#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open3;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to provide fast
# git status.
#
# The hook is passed a version (currently 1) and a time in nanoseconds
# formatted as a string and outputs to stdout all files that have been
# modified since the given time. Paths must be relative to the root of
# the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-fsmonitor"
#

my ($version, $time) = @ARGV;

# Check the hook interface version

if ($version == 1) {
	# convert nanoseconds to seconds
	$time = $time / 1000000000;
} else {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = $ENV{'PWD'};

# TODO: Look into handling "unable to resolve root" errors by automatically
# telling Watchman to watch them if it returns an "unable to resolve root"
# error.
#
# {
#    "version": "4.9.0",
#    "error": "unable to resolve root C:/Repos/foo: directory C:/Repos/foo is not watched"
# }
#
`watchman watch "$git_work_tree"`;

# In the query expression below we're asking for names of files that
# changed since $time but were not transient (ie created after
# $time but no longer exist).
#
# To accomplish this, we're using the "since" generator to use the
# recency index to select candidate nodes and "fields" to limit the
# output to file names only. Then we're using the "expression" term to
# further constrain the results.
#
# The category of transient files that we want to ignore will have a
# creation clock (cclock) newer than $time_t value and will also not
# currently exist.

# Set input record separator
$/ = 0666;

my $pid = open3(\*CHLD_IN, \*CHLD_OUT, \*CHLD_ERR, 'watchman -j')
    or die "open3() failed $!";

print CHLD_IN "[\"query\", \"$git_work_tree\", { \
	\"since\": $time, \
	\"fields\": [\"name\"], \
	\"expression\": [\"not\", [\"allof\", [\"since\", $time, \"cclock\"], [\"not\", \"exists\"]]] \
	}]";

my $response = <CHLD_OUT>;
my $err = <CHLD_ERR>;

die "Watchman: command returned no output.\n" .
    "Falling back to scanning...\n" if $response eq "";
die "Watchman: command returned invalid output: $response\n" .
    "Falling back to scanning...\n" unless $response =~ /^\{/;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

my $o = $json_pkg->new->utf8->decode($response);
die "Watchman: $o->{error}.\n" .
    "Falling back to scanning...\n" if $o->{error};

binmode STDOUT, ":utf8";
local $, = "\0";
print @{$o->{files}};



