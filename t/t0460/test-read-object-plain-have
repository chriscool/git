#!/usr/bin/perl
#

use 5.008;
use lib (split(/:/, $ENV{GITPERLLIB}));
use strict;
use warnings;
use Git::Packet;

sub packet_client_initialize {
	my ($name, $version) = @_;

	packet_txt_write( $name . "-client" );
	packet_txt_write( "version=" . $version );
	packet_flush();

	( packet_txt_read() eq ( 0, $name . "-server" ) )		|| die "bad initialize";
	( packet_txt_read() eq ( 0, "version=" . $version ) )		|| die "bad version";
	( packet_bin_read() eq ( 1, "" ) )				|| die "bad version end";
}

packet_client_initialize("git-read-object", 1);

packet_write_capabilities("get", "put", "have");
packet_read_and_check_capabilities("get", "put", "have");

packet_txt_write( "command=have" );
packet_flush();

print STDERR "receiving content by test-read-object-plain-have:\n";
my ($res, $buf) = packet_bin_read();
die "bad packet_bin_read res ($res)" unless ($res eq 0);
print STDERR "content received by test-read-object-plain-have:\n";
print STDERR $buf;
( packet_bin_read() eq ( 1, "" ) )				|| die "bad send end";

( packet_txt_read() eq ( 0, "status=success" ) )		|| die "bad status";
( packet_bin_read() eq ( 1, "" ) )				|| die "bad status end";

