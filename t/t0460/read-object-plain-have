#!/usr/bin/perl
#

use 5.008;
use lib (split(/:/, $ENV{GITPERLLIB}));
use strict;
use warnings;
use Git::Packet;
use LWP::UserAgent;
use HTTP::Request::Common;

print STDERR "read-object-plain-have: starting\n";

packet_initialize("git-read-object", 1);

print STDERR "read-object-plain-have: after init\n";

packet_read_and_check_capabilities("get", "put", "have");
packet_write_capabilities("get", "put", "have");

print STDERR "read-object-plain-have: after reading and writing get and have capabilities\n";

my $http_url = $ENV{HTTPD_URL};

while (1) {
	my ($command) = packet_txt_read() =~ /^command=([^=]+)$/;

	print STDERR "read-object-plain-have: command: '$command'\n";

	if ( $command eq "have" ) {
		my $have_url = $http_url . "/list/";
		print STDERR "read-object-plain-have: have_url: '$have_url'\n";

		my $userAgent = LWP::UserAgent->new();
		my $response = $userAgent->get( $get_url );

		if ($response->is_error) {
		    print STDERR $response->error_as_HTML . "\n";
		    packet_bin_write("");
		    packet_flush();
		    packet_txt_write("status=failure");
		} else {
		    print STDERR "content: \n";
		    print STDERR $response->content;
		    packet_bin_write($response->content);
		    packet_flush();
		    packet_txt_write("status=success");
		}
		packet_flush();
	} elsif ( $command eq "get" ) {
		my ($sha1) = packet_txt_read() =~ /^sha1=([0-9a-f]{40})$/;
		packet_bin_read();

		my $get_url = $http_url . "/list/?sha1=" . $sha1;
		print STDERR "read-object-plain-have: get_url: '$get_url'\n";

		my $userAgent = LWP::UserAgent->new();

		my $response = $userAgent->get( $get_url );

		if ($response->is_error) {
		    print STDERR $response->error_as_HTML . "\n";
		    packet_txt_write("size=0");
		    packet_txt_write("kind=none");	    
		    packet_txt_write("status=failure");
		} else {
		    print STDERR "content: \n";
		    print STDERR $response->content;
		    packet_txt_write("size=" . length($response->content));
		    packet_txt_write("kind=blob");
		    packet_bin_write($response->content);
		    packet_flush();
		    packet_txt_write("status=success");
		}

		packet_flush();
	} elsif ( $command eq "put" ) {
		my ($sha1) = packet_txt_read() =~ /^sha1=([0-9a-f]{40})$/;
		print STDERR "read-object-plain-have: put sha1: '$sha1'\n";

		my ($size) = packet_txt_read() =~ /^size=([0-9]+)$/;
		print STDERR "read-object-plain-have: put size: '$size'\n";

		my ($kind) = packet_txt_read() =~ /^kind=(\w+)$/;
		print STDERR "read-object-plain-have: put kind: '$kind'\n";

		packet_bin_read();

		# We must read the content we are sent and send it to the right url
		my ($res, $buf) = packet_bin_read();
		die "bad packet_bin_read res ($res)" unless ($res eq 0);
		( packet_bin_read() eq ( 1, "" ) ) || die "bad send end";		

		my $upload_url = $http_url . "/upload/?sha1=" . $sha1 . "&size=" . $size . "&type=blob";
		print STDERR "read-object-plain-have: upload_url: '$upload_url'\n";
		print STDERR "read-object-plain-have: upload buffer: '$buf'\n";

		my $userAgent = LWP::UserAgent->new();
		my $request = POST $upload_url, Content_Type => 'multipart/form-data', Content => $buf;

		my $response = $userAgent->request($request);

		if ($response->is_error) {
			print STDERR $response->error_as_HTML . "\n";
			packet_txt_write("status=failure");
		} else {
			packet_txt_write("status=success");
		}
		packet_flush();
	} else {
		die "bad command '$command'";
	}
}
