#!/usr/bin/perl
#
# Example implementation for the Git read-object protocol version 1
# See Documentation/technical/read-object-protocol.txt
#
# Allows you to test the ability for blobs to be pulled from a host git repo
# "on demand."  Called when git needs a blob it couldn't find locally due to
# a lazy clone that only cloned the commits and trees.
#
# A lazy clone can be simulated via the following commands from the host repo
# you wish to create a lazy clone of:
#
# cd /host_repo
# git rev-parse HEAD
# git init /guest_repo
# git cat-file --batch-check --batch-all-objects | grep -v 'blob' |
#	cut -d' ' -f1 | git pack-objects /e/guest_repo/.git/objects/pack/noblobs
# cd /guest_repo
# git config core.virtualizeobjects true
# git reset --hard <sha from rev-parse call above>
#
# Please note, this sample is a minimal skeleton. No proper error handling 
# was implemented.
#

use 5.008;
use lib (split(/:/, $ENV{GITPERLLIB}));
use strict;
use warnings;
use Git::Packet;

#
# Point $DIR to the "objects" folder of your host git repo, so we can
# pull missing objects from it.
#
my $DIR = "../.git/objects/";

packet_initialize("git-read-object", 1);

packet_read_capability("get");
packet_write_capability("get");

while (1) {
	my ($command) = packet_txt_read() =~ /^command=([^=]+)$/;

	if ( $command eq "get" ) {
		my ($sha1) = packet_txt_read() =~ /^sha1=([0-9a-f]{40})$/;
		packet_bin_read();

		packet_txt_write("status=success");
		packet_flush();

		my $path = $sha1;
		$path =~ s{..}{$&/};
		$path = $DIR . $path;

		my $contents = do {
		    local $/;
		    open my $fh, $path or die "Can't open '$path': $!";
		    <$fh>
		};

		packet_bin_write($contents);
		packet_flush();

		packet_txt_write("status=success");
		packet_flush();

	} else {
		die "bad command '$command'";
	}
}
